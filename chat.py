import random
import json

import torch

from model import NeuralNet
from nltk_utils import bag_of_words, tokenize

from googletrans import Translator
translator = Translator()

device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

with open('intents.json', 'r') as json_data:
    intents = json.load(json_data,strict=False)

FILE = "data.pth"
data = torch.load(FILE)


input_size = data["input_size"]
    hidden_size = data["hidden_size"]
    output_size = data["output_size"]
    all_words = data['all_words']
    tags = data['tags']
    model_state = data["model_state"]

    model = NeuralNet(input_size, hidden_size, output_size).to(device)
    model.load_state_dict(model_state)
    model.eval()

    bot_name = "Medicare"
    print("Let's chat!Your safety...Our priorityüòä.If you want to chat with us in English,press 1.‡§ö‡§≤‡§æ ‡§¨‡•ã‡§≤‡•Ç‡§Ø‡§æ! ‡§Ü‡§™‡§≤‡•Ä ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ...‡§Ü‡§Æ‡§ö‡•á ‡§™‡•ç‡§∞‡§æ‡§ß‡§æ‡§®‡•ç‡§Øüòä.‡§Ü‡§™‡§£‡§æ‡§∏ ‡§Ü‡§Æ‡§ö‡•ç‡§Ø‡§æ‡§∏‡§π ‡§Æ‡§∞‡§æ‡§†‡•Ä ‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§¨‡•ã‡§≤‡§æ‡§Ø‡§ö‡•á ‡§Ö‡§∏‡§≤‡•ç‡§Ø‡§æ‡§∏  ‡•® ‡§¶‡§æ‡§¨‡§æ. ‡§ö‡§≤‡•ã ‡§¨‡§æ‡§§ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç!‡§Ü‡§™‡§ï‡•Ä ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ...‡§π‡§Æ‡§æ‡§∞‡•Ä ‡§™‡•ç‡§∞‡§æ‡§•‡§Æ‡§ø‡§ï‡§§‡§æüòä.‡§Ö‡§ó‡§∞ ‡§Ü‡§™ ‡§π‡§Æ‡§æ‡§∞‡•á ‡§∏‡§æ‡§• ‡§Ö‡§Ç‡§ó‡•ç‡§∞‡•á‡§ú‡•Ä ‡§Æ‡•á‡§Ç ‡§ö‡•à‡§ü ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç, ‡§§‡•ã ‡•© ‡§¶‡§¨‡§æ‡§è‡§Ç|")
    while True:
        # sentence = "do you use credit cards?"
        sentence = input("You: ")
        if sentence !="1" and sentence != "2" and sentence !="3":
            print("Oops..You have pressed incorrect digit.Please try again:)‡§Ö‡§∞‡•á‡§∞‡•á .. ‡§Ü‡§™‡§£ ‡§ö‡•Å‡§ï‡•Ä‡§ö‡§æ ‡§Ö‡§Ç‡§ï ‡§¶‡§æ‡§¨‡§≤‡§æ ‡§Ü‡§π‡•á. ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•Å‡§®‡•ç‡§π‡§æ ‡§™‡•ç‡§∞‡§Ø‡§§‡•ç‡§® ‡§ï‡§∞‡§æ :)‡§ì‡§π..‡§Ü‡§™‡§®‡•á ‡§ó‡§≤‡§§ ‡§Ö‡§Ç‡§ï ‡§¶‡§¨‡§æ‡§Ø‡§æ ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•Å‡§®: ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç :)")
            continue

        if sentence =="1":
            print("Medicare: Hello..How may I help you?")
            while True:
                sentence = input("You: ")
                sentence = tokenize(sentence)
                X = bag_of_words(sentence, all_words)
                X = X.reshape(1, X.shape[0])
                X = torch.from_numpy(X).to(device)

                output = model(X)
                _, predicted = torch.max(output, dim=1)

                tag = tags[predicted.item()]

                probs = torch.softmax(output, dim=1)
                prob = probs[0][predicted.item()]
                if prob.item() > 0.75:
                    for intent in intents['intents']:
                        if tag == intent["tag"]:
                            print(f"{bot_name}: {random.choice(intent['responses'])}")
                else:
                    print(f"{bot_name}: I don't understand.Please try to ask in other wayüôÇ")

        if sentence =="2":
            print("Medicare: ‡§®‡§Æ‡§∏‡•ç‡§ï‡§æ‡§∞..‡§Æ‡•Ä ‡§ï‡§æ‡§Ø ‡§Æ‡§¶‡§§ ‡§ï‡§∞‡•Å ‡§∂‡§ï‡§§‡•á?")
            while True:
                sentence = input("You: ")
                translation = translator.translate(sentence, dest='en')
                sentence = tokenize(translation.text)
                X = bag_of_words(sentence, all_words)
                X = X.reshape(1, X.shape[0])
                X = torch.from_numpy(X).to(device)

                output = model(X)
                _, predicted = torch.max(output, dim=1)

                tag = tags[predicted.item()]

                probs = torch.softmax(output, dim=1)
                prob = probs[0][predicted.item()]
                if prob.item() > 0.75:
                    for intent in intents['intents']:
                        if tag == intent["tag"]:
                            res = random.choice(intent['responses'])
                            res1 = translator.translate(res, dest='mr')
                            #for r in res1:
                            res2 = res1.text
                            print(f"{bot_name}: {res2}")
                else:
                    print(f"{bot_name}: ‡§Æ‡§≤‡§æ ‡§∏‡§Æ‡§ú‡§≤‡•á ‡§®‡§æ‡§π‡•Ä. ‡§ï‡•É‡§™‡§Ø‡§æ ‡§á‡§§‡§∞ ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§æ‡§®‡•á ‡§µ‡§ø‡§ö‡§æ‡§∞‡§£‡•ç‡§Ø‡§æ‡§ö‡§æ ‡§™‡•ç‡§∞‡§Ø‡§§‡•ç‡§® ‡§ï‡§∞‡§æüôÇ")

        if sentence =="3":
            print("Medicare: ‡§®‡§Æ‡§∏‡•ç‡§ï‡§æ‡§∞..‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§ï‡•à‡§∏‡•á ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•Ä  ‡§π‡•Ç‡§Ç?")
            while True:
                sentence = input("You: ")
                translation = translator.translate(sentence, dest='en')
                sentence = tokenize(translation.text)
                X = bag_of_words(sentence, all_words)
                X = X.reshape(1, X.shape[0])
                X = torch.from_numpy(X).to(device)

                output = model(X)
                _, predicted = torch.max(output, dim=1)

                tag = tags[predicted.item()]

                probs = torch.softmax(output, dim=1)
                prob = probs[0][predicted.item()]
                if prob.item() > 0.75:
                    for intent in intents['intents']:
                        if tag == intent["tag"]:
                            res = random.choice(intent['responses'])
                            res1 = translator.translate(res, dest='hi')
                            #for r in res1:
                            res2 = res1.text
                            print(f"{bot_name}: {res2}")
                else:
                    print(f"{bot_name}: ‡§Æ‡•Å‡§ù‡•á ‡§∏‡§Æ‡§ù ‡§®‡§π‡•Ä‡§Ç ‡§Ü‡§Ø‡§æ‡•§‡§ï‡•É‡§™‡§Ø‡§æ ‡§¶‡•Ç‡§∏‡§∞‡•á ‡§§‡§∞‡•Ä‡§ï‡•á ‡§∏‡•á ‡§™‡•Ç‡§õ‡§®‡•á ‡§ï‡•Ä ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§ÇüôÇ")

'''from flask import Flask, render_template, request
app = Flask(__name__)
app.static_folder = 'static'
@app.route("/")
def home():
    return render_template("index.html")
@app.route("/get")
def get_bot_response():
    userText = request.args.get('msg')
    return chatbot_response(userText)
if __name__ == "__main__":
    app.run()'''

